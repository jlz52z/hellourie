# .github/workflows/deploy.yml

name: Build and Deploy Hugo Site to Server

# 触发条件：当 main 分支有 push 操作时触发
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    # 运行环境：使用最新的 Ubuntu 系统
    runs-on: ubuntu-latest

    steps:
      # 第一步：检出代码
      # 拉取你的 Hugo 博客仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true  # 确保拉取主题子模块 (themes/even)
          fetch-depth: 0    # 拉取所有 git 历史，以便 enableGitInfo 能正常工作

      # 第二步：设置 Hugo 环境
      # 安装 Hugo CLI
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest' # 使用最新版本的 Hugo
          extended: true         # 必须！even 主题需要 extended 版本来处理 Sass/SCSS

      # 第三步：构建网站
      # 运行 hugo 命令生成静态文件到 public 目录
      - name: Build Hugo site
        env:
          # 注入环境变量，将 GitHub Secrets 的值传递给 Hugo
          # Hugo 的 hugo.toml 文件会通过 os.Getenv 读取这些变量
          GITALK_CLIENT_ID: ${{ secrets.GITALK_CLIENT_ID }}
          GITALK_CLIENT_SECRET: ${{ secrets.GITALK_CLIENT_SECRET }}
        run: hugo --minify # --minify 用于压缩 HTML, CSS, JS 等文件，减小体积

      # 第四步：部署到服务器
      # 使用 rsync 将 public 目录的内容同步到你的云服务器
      - name: Deploy to Server via Rsync
        uses: burnett01/rsync-deployments@6.0.0
        with:
          # -a: 归档模式, 相当于 -rlptgoD, 保持文件原有属性
          # -v: 详细模式, 显示传输过程
          # -z: 压缩传输
          # -r: 递归同步
          # --delete: 删除服务器上存在但本地 public 目录中不存在的文件，保持完全同步
          # -e 'ssh -p ...': 指定 rsync 使用的 SSH 端口，这是非标准端口的关键
          switches: -avzr --delete -e 'ssh -p ${{ secrets.SSH_PORT }}'
          
          # 本地源路径：hugo 构建好的 public 目录
          path: public/
          
          # 远程服务器配置：从 GitHub Secrets 中读取
          remote_path: ${{ secrets.TARGET_DIR }}      # 服务器上网站的根目录，例如 /var/www/myblog
          remote_host: ${{ secrets.SSH_HOST }}        # 服务器的 IP 地址或域名
          remote_user: ${{ secrets.SSH_USER }}        # 登录服务器的用户名
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}  # 用于登录服务器的 SSH 私钥
